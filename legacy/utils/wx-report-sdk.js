"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(t, e) {
  if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
}var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (t) {
  return typeof t === "undefined" ? "undefined" : _typeof2(t);
} : function (t) {
  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof2(t);
},
    _createClass = function () {
  function t(t, e) {
    for (var a = 0; a < e.length; a++) {
      var s = e[a];s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, s.key, s);
    }
  }return function (e, a, s) {
    return a && t(e.prototype, a), s && t(e, s), e;
  };
}(),
    wxRepotSdk = function () {
  function t(e) {
    _classCallCheck(this, t), this.originPage = Page, this.originApp = App, this.wxRequest = wx.request, this.haveAjax = !1, this.isReport = !1, this.timer = null, this.config = { isUse: !0, isNet: !0, isSys: !0, isLocal: !0, timeout: 300, isRepeat: !1, domain: "test.com" }, this.config = Object.assign(this.config, e || {}), this.datas = { errs: [], markuser: "", markuv: "", net: "", system: {}, loc: {}, pages: {}, ajaxs: [], type: 1 }, this.datas = Object.assign(this.datas, e.add || {}), this.init();
  }return _createClass(t, [{ key: "init", value: function value() {
      this.config.isUse && (this.page(), this.app(), this.wrapRequest(), this.config.isNet && this.network(), this.config.isSys && this.system(), this.config.isLocal && this.location());
    } }, { key: "randomString", value: function value(t) {
      t = t || 10;for (var e = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789", a = e.length, s = "", i = 0; i < t; i++) {
        s += e.charAt(Math.floor(Math.random() * a));
      }return s + new Date().getTime();
    } }, { key: "page", value: function value() {
      var t = this;Page = function Page(e) {
        var a = e.onShow || function () {};e.onShow = function () {
          clearTimeout(this.timer), t.datas.type = 1, t.isReport = !1;var e = getCurrentPages();if (e && e.length) {
            var s = e.length,
                i = e[s - 1];t.datas.pages.router = i.__route__, t.datas.pages.options = i.options || {};
          }return t.datas.markuser || wx.getStorage({ key: "ps_wx_mark_user", success: function success(e) {
              t.datas.markuser = e;
            } }), t.datas.markuv || wx.getStorage({ key: "ps_wx_mark_uv", success: function success(e) {
              t.datas.markuv = e;
            } }), this.timer = setTimeout(function () {
            t.haveAjax || (t.isReport = !0, t.datas.time = new Date().getTime(), t.report());
          }, t.config.timeout), a.apply(this, arguments);
        };var s = e.onPullDownRefresh || function () {};e.onPullDownRefresh = function () {
          return t.datas.type = 1, setTimeout(function () {
            t.datas.type = 2;
          }, 1500), s.apply(this, arguments);
        }, t.originPage(e);
      };
    } }, { key: "app", value: function value() {
      var t = this;App = function App(e) {
        var a = e.onError || function () {},
            s = e.onShow || function () {};e.onError = function (e) {
          var s = e.split(/\n/) || [],
              i = void 0,
              n = void 0,
              r = void 0,
              o = e.match(/\(.+?\)/);return o && o.length && (o = o[0]), o ? (o = o.replace(/\w.+js/g, function (t) {
            return i = t, "";
          }), o = o.split(":"), o && o.length > 1 && (r = parseInt(o[1] || 0)), n = parseInt(o[2] || 0), t.datas.errs.push({ col: n, line: r, name: i, msg: s[0] + ";" + s[1] + ";" + s[2] + ";", type: "js" })) : t.datas.errs.push({ col: 0, line: 0, name: "err", msg: e + "", type: "js" }), 2 === t.datas.type && t.report(3), a.apply(this, arguments);
        }, e.onShow = function () {
          t.isReport = !1, t.datas.type = 1;var e = t.randomString();return wx.setStorage({ key: "ps_wx_mark_user", data: e }), t.datas.markuser = e, t.datas.markuv = t.markUv(), s.apply(this, arguments);
        }, t.originApp(e);
      };
    } }, { key: "markUv", value: function value() {
      var t = new Date(),
          e = wx.getStorageSync("ps_wx_mark_uv") || "",
          a = wx.getStorageSync("ps_wx_mark_uv_time") || "",
          s = t.getFullYear() + "/" + (t.getMonth() + 1) + "/" + t.getDate() + " 23:59:59";return (!e && !a || t.getTime() > 1 * a) && (e = this.randomString(), wx.setStorage({ key: "ps_wx_mark_uv", data: e }), wx.setStorage({ key: "ps_wx_mark_uv_time", data: new Date(s).getTime() })), e;
    } }, { key: "network", value: function value() {
      var t = this;wx.getNetworkType({ success: function success(e) {
          t.datas.net = e.networkType;
        } });
    } }, { key: "system", value: function value() {
      var t = this;wx.getSystemInfo({ success: function success(e) {
          t.datas.system = e;
        } });
    } }, { key: "location", value: function value() {
      var t = this;wx.getLocation({ type: "wgs84", success: function success(e) {
          t.datas.loc = e;
        } });
    } }, { key: "wrapRequest", value: function value() {
      var t = null,
          e = wx.request,
          a = [],
          s = [],
          i = this;Object.defineProperty(wx, "request", { configurable: !0, enumerable: !0, writable: !0, value: function value() {
          var n = arguments[0] || {};i.haveAjax = !0, a.push({ url: n.url || "", options: n.data || "", method: n.method || "GET", begintime: new Date().getTime() });var r = n.complete || function (t) {};return n.complete = function (e) {
            var o = "object" === _typeof(e.data) ? JSON.stringify(e.data) : e.data || "",
                u = e.header["Content-Length"] || o.length || 0;return s.push({ errMsg: e.errMsg, url: n.url || "", statusCode: e.statusCode, endtime: new Date().getTime(), bodySize: u }), s.length === a.length && (clearTimeout(t), t = setTimeout(function () {
              s.length === a.length && i.mergeAjax(a, s), a = [], s = [], clearTimeout(t);
            }, i.config.timeout)), r.apply(this, arguments);
          }, e.apply(this, arguments);
        } });
    } }, { key: "mergeAjax", value: function value(t, e) {
      var a = this;e.forEach(function (s, i) {
        if (t.forEach(function (t, e) {
          s.url.indexOf(t.url) > -1 && ("request:ok" === s.errMsg && 200 === s.statusCode ? a.datas.ajaxs.push({ duration: s.endtime - t.begintime || 0, name: t.url, method: t.method, bodySize: s.bodySize, options: t.options }) : a.datas.errs.push({ name: t.url, method: t.method, msg: s.errMsg, type: "ajax", status: s.statusCode, options: t.options }));
        }), i === e.length - 1) {
          if (!a.config.isRepeat && a.isReport) return;a.isReport = !0, a.datas.time = new Date().getTime(), a.report();
        }
      });
    } }, { key: "report", value: function value(t) {
      var e = { appId: this.datas.appId, markuser: this.datas.markuser, markuv: this.datas.markuv, pages: this.datas.pages, time: this.datas.time, type: this.datas.type, ajaxs: this.datas.ajaxs, errs: this.datas.errs };this.config.isNet && 1 === this.datas.type && (e.net = this.datas.net), this.config.isSys && 1 === this.datas.type && (e.system = this.datas.system), this.config.isLocal && 1 === this.datas.type && (e.loc = this.datas.loc), t && (e.type = t);var a = null,
          s = this.wxRequest({ method: "POST", url: this.config.domain, data: e, success: function success(t) {
          clearTimeout(a);
        } });this.haveAjax = !1, this.isReport = !1, this.datas.type = 2, this.datas.errs = [], this.datas.ajaxs = [], a = setTimeout(function () {
        s.abort();
      }, 3e3);
    } }]), t;
}();module.exports = wxRepotSdk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,